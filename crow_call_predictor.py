# -*- coding: utf-8 -*-
"""Crow_call_predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RuanBgzzkr93ax_JV9DcP_pdTxTHBa4p
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

csv_path = "/content/drive/MyDrive/Eywa/results/crow_segments_clusters_with_meanings.csv"
df = pd.read_csv(csv_path)

print("âœ… Data loaded. Here are the columns:")
print(df.columns)

# Step 2: Select features and labels

# All MFCC, delta, delta-delta columns
features = [col for col in df.columns if "mfcc_mean_" in col or
                                       "mfcc_delta_mean_" in col or
                                       "mfcc_delta2_mean_" in col]

X = df[features]
y = df["cluster"]

print(f"âœ… Selected {len(features)} features for training.")

from sklearn.model_selection import train_test_split

# Split the data â€” 80% training, 20% testing
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

print(f"âœ… Data split complete.")
print(f"Training samples: {len(X_train)}")
print(f"Test samples: {len(X_test)}")

from sklearn.ensemble import RandomForestClassifier

# Initialize and train the Random Forest
clf = RandomForestClassifier(
    n_estimators=200,
    random_state=42,
    n_jobs=-1  # Use all available cores
)

clf.fit(X_train, y_train)

print("âœ… Random Forest training complete.")

from sklearn.metrics import accuracy_score, classification_report

# Predict on test data
y_pred = clf.predict(X_test)

# Overall accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"âœ… Test Set Accuracy: {accuracy:.2%}")

# Detailed classification report
print("\nClassification Report:\n")
print(classification_report(y_test, y_pred))

import numpy as np

# Meaning dictionary (same as before)
cluster_meanings = {
    0: "Mimicry",
    1: "Begging Call",
    2: "Alarm Call",
    3: "Territorial Call",
    4: "Typical Caw",
    5: "Warning Call",
    6: "Assembly Call",
    7: "Mobbing Call",
    8: "Mixed/Noise",
    9: "Cooing Call",
    10: "Juvenile Call",
    11: "Gender-Specific Call",
    12: "Contact Call",
    13: "Rattle Call Variant",
    14: "Rattle Call",
    15: "Distress Call Variant",
    16: "Distress Call",
    17: "Noise",
    18: "Territorial Call Variant",
    19: "Unassigned/Rare Call"
}

# Pick a random test sample
idx = np.random.choice(X_test.index)
sample_features = X_test.loc[idx].values.reshape(1, -1)
true_cluster = y_test.loc[idx]
predicted_cluster = clf.predict(sample_features)[0]

print("ðŸŽ¯ Random Test Sample Prediction")
print("--------------------------------")
print(f"True Cluster: {true_cluster} ({cluster_meanings[true_cluster]})")
print(f"Predicted Cluster: {predicted_cluster} ({cluster_meanings[predicted_cluster]})")

for _ in range(5):  # Change the number if you want more or fewer samples
    idx = np.random.choice(X_test.index)
    sample_features = X_test.loc[idx].values.reshape(1, -1)
    true_cluster = y_test.loc[idx]
    predicted_cluster = clf.predict(sample_features)[0]

    print("ðŸŽ¯ Test Sample")
    print("-----------------------------")
    print(f"True Cluster: {true_cluster} ({cluster_meanings[true_cluster]})")
    print(f"Predicted Cluster: {predicted_cluster} ({cluster_meanings[predicted_cluster]})")
    print()

import joblib

# Path to save the model in your Drive
model_path = "/content/drive/MyDrive/Eywa/models/random_forest_crow_classifier.joblib"

# Save the trained classifier
joblib.dump(clf, model_path)

print(f"âœ… Model saved to: {model_path}")

import shutil
from google.colab import files

# Copy from Drive to Colab working directory
shutil.copy(
    "/content/drive/MyDrive/Eywa/models/random_forest_crow_classifier.joblib",
    "/content/random_forest_crow_classifier.joblib"
)

# Download to your laptop
files.download("/content/random_forest_crow_classifier.joblib")

import joblib

model_path = "/content/drive/MyDrive/Eywa/models/random_forest_crow_classifier.joblib"
clf = joblib.load(model_path)

print("âœ… Model loaded.")

import librosa
import numpy as np

# Path to your audio file
audio_path = "/content/drive/MyDrive/Eywa/American_Crow/e23aca67-1034-461e-ba56-e7de35440217.wav"

# Load the audio â€” using 22050 Hz as thatâ€™s standard and likely matches training
y, sr = librosa.load(audio_path, sr=22050)

# ---- Extract MFCC means ----
mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
mfcc_mean = mfcc.mean(axis=1)

# ---- Extract delta means ----
delta = librosa.feature.delta(mfcc)
delta_mean = delta.mean(axis=1)

# ---- Extract delta-delta (delta2) means ----
delta2 = librosa.feature.delta(mfcc, order=2)
delta2_mean = delta2.mean(axis=1)

# ---- Combine all into one feature vector ----
feature_vector = np.concatenate([mfcc_mean, delta_mean, delta2_mean])

print("âœ… Feature extraction complete.")
print("Feature vector shape:", feature_vector.shape)

# Create the feature vector in the same order as training
feature_vector = np.concatenate([mfcc_mean, delta_mean, delta2_mean])

# Check shape
print("Feature vector shape:", feature_vector.shape)  # Should be (39,)

# Reshape for prediction
sample_features = feature_vector.reshape(1, -1)

# Predict cluster
predicted_cluster = clf.predict(sample_features)[0]

# Meaning dictionary
cluster_meanings = {
    0: "Mimicry", 1: "Begging Call", 2: "Alarm Call", 3: "Territorial Call",
    4: "Typical Caw", 5: "Warning Call", 6: "Assembly Call", 7: "Mobbing Call",
    8: "Mixed/Noise", 9: "Cooing Call", 10: "Juvenile Call", 11: "Gender-Specific Call",
    12: "Contact Call", 13: "Rattle Call Variant", 14: "Rattle Call",
    15: "Distress Call Variant", 16: "Distress Call", 17: "Noise",
    18: "Territorial Call Variant", 19: "Unassigned/Rare Call"
}

print(f"ðŸŽ¯ Predicted Cluster: {predicted_cluster} ({cluster_meanings[predicted_cluster]})")